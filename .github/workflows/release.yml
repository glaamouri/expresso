name: Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 1.1.0)'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
    
    - name: Set Release Version
      run: echo "RELEASE_VERSION=${{ github.event.inputs.release_version }}" >> $GITHUB_ENV
    
    - name: Set up GPG
      run: |
        # Debug: Show gpg version
        gpg --version
        
        # Create proper GPG directories with permissions
        mkdir -p ~/.gnupg
        chmod 700 ~/.gnupg
        
        # Configure GPG for batch mode
        echo "batch" > ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        chmod 600 ~/.gnupg/gpg.conf
        
        # Save and import the key
        echo "${{ secrets.GPG_PRIVATE_KEY }}" > private.key
        chmod 600 private.key
        cat private.key | gpg --batch --import
        rm private.key
        
        # Debug: List all keys
        echo "Listing all keys:"
        gpg --list-secret-keys --keyid-format LONG
        
        # Get the key ID
        GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -n 1 | awk '{print $2}' | cut -d'/' -f2)
        echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
        echo "Using GPG key: $GPG_KEY_ID"
        
        # Distribute the key - continue if fails
        gpg --batch --yes --keyserver keyserver.ubuntu.com --send-keys $GPG_KEY_ID || true
        gpg --batch --yes --keyserver keys.openpgp.org --send-keys $GPG_KEY_ID || true
        gpg --batch --yes --keyserver pgp.mit.edu --send-keys $GPG_KEY_ID || true
    
    - name: Build with Maven
      run: |
        mvn -B clean package -Prelease \
          -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}" \
          -Dgpg.keyname=${{ env.GPG_KEY_ID }}
    
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.RELEASE_VERSION }}
        name: Release v${{ env.RELEASE_VERSION }}
        draft: false
        prerelease: false
        files: target/expresso-${{ env.RELEASE_VERSION }}.jar
        
    - name: Publish to Maven Central
      if: success()
      run: |
        mvn -B deploy -Prelease -DskipTests \
          -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}" \
          -Dgpg.keyname=${{ env.GPG_KEY_ID }}
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }} 