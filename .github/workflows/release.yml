name: Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 1.1.0)'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
    
    - name: Set Release Version
      run: echo "RELEASE_VERSION=${{ github.event.inputs.release_version }}" >> $GITHUB_ENV
    
    - name: Set up GPG
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 --decode > private.key
        gpg --batch --import private.key
        rm private.key
        
        # Get the key ID
        GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep -B 1 ".*@.*" | head -n 1 | awk '{print $2}' | cut -d'/' -f2)
        echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
        echo "Using GPG key: $GPG_KEY_ID"
        
        # Distribute the key
        gpg --keyserver keyserver.ubuntu.com --send-keys $GPG_KEY_ID
        gpg --keyserver keys.openpgp.org --send-keys $GPG_KEY_ID
        gpg --keyserver pgp.mit.edu --send-keys $GPG_KEY_ID
        
        # Create GPG agent config
        mkdir -p ~/.gnupg
        echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
        echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
        gpg-connect-agent reloadagent /bye
    
    - name: Build with Maven
      run: mvn -B clean package -Prelease
    
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.RELEASE_VERSION }}
        name: Release v${{ env.RELEASE_VERSION }}
        draft: false
        prerelease: false
        files: target/expresso-${{ env.RELEASE_VERSION }}.jar
        
    - name: Publish to Maven Central
      if: success()
      run: mvn -B deploy -Prelease -DskipTests -Dgpg.keyname=${{ env.GPG_KEY_ID }}
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }} 